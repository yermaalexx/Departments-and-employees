openapi: 3.0.3
info:
  contact:
    email: yermakov80@gmail.com
  description: "Test task: departments and employees"
  title: DepartmentsAndEmployees
  version: 0.0.1
servers:
- description: local server
  url: http://localhost:8080/
tags:
- description: actions on employee records
  name: employees
- description: actions on departmental records
  name: departments
paths:
  /employees:
    post:
      operationId: addEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeDTO'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDTO'
          description: "Successful operation: new employee added"
      summary: Add a new employee
      tags:
      - employees
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: employees
    put:
      operationId: editEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeDTO'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDTO'
          description: "Successful operation: employee edited"
        "404":
          description: Employee id not found
      summary: Edit employee by employeeID in DTO
      tags:
      - employees
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: employees
  /employees/{employeeId}:
    delete:
      operationId: deleteEmployee
      parameters:
      - description: ID of employee to delete
        explode: false
        in: path
        name: employeeId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: "Successful operation: employee deleted"
        "404":
          description: Employee id not found
      summary: Delete employee by employeeID
      tags:
      - employees
      x-accepts: application/json
      x-tags:
      - tag: employees
    get:
      operationId: getEmployee
      parameters:
      - description: ID of employee to get
        explode: false
        in: path
        name: employeeId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDTO'
          description: "Successful operation: employee data received"
        "404":
          description: Employee id not found
      summary: Get employee by employeeID
      tags:
      - employees
      x-accepts: application/json
      x-tags:
      - tag: employees
  /employees/{employeeId}/{newDepartmentId}:
    patch:
      operationId: editDepartmentOfEmployee
      parameters:
      - description: ID of employee to edit department
        explode: false
        in: path
        name: employeeId
        required: true
        schema:
          type: integer
        style: simple
      - description: ID of department to set
        explode: false
        in: path
        name: newDepartmentId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDTO'
          description: "Successful operation: department of employee edited"
        "404":
          description: Employee id not found
      summary: Set new department id for given employee
      tags:
      - employees
      x-accepts: application/json
      x-tags:
      - tag: employees
  /employees/all:
    get:
      operationId: getListOfEmployees
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeListDTO'
          description: "Successful operation: list of employees received"
      summary: Get list of all employees
      tags:
      - employees
      x-accepts: application/json
      x-tags:
      - tag: employees
  /departments:
    post:
      operationId: addDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentDTO'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentDTO'
          description: "Successful operation: new department added"
      summary: Add a new department
      tags:
      - departments
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: departments
    put:
      operationId: editDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentDTO'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentDTO'
          description: "Successful operation: department edited"
        "404":
          description: Department id not found
      summary: Edit department by departmentID in DTO
      tags:
      - departments
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: departments
  /departments/{departmentId}:
    delete:
      operationId: deleteDepartment
      parameters:
      - description: ID of department to delete
        explode: false
        in: path
        name: departmentId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: "Successful operation: department deleted"
        "404":
          description: Department id not found
      summary: Delete department by departmentID
      tags:
      - departments
      x-accepts: application/json
      x-tags:
      - tag: departments
    get:
      operationId: getDepartment
      parameters:
      - description: ID of department to get
        explode: false
        in: path
        name: departmentId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentDTO'
          description: "Successful operation: department data received"
        "404":
          description: Department id not found
      summary: Get department by departmentID
      tags:
      - departments
      x-accepts: application/json
      x-tags:
      - tag: departments
  /departments/{departmentId}/list:
    get:
      operationId: getListOfEmployeesForDepartment
      parameters:
      - description: ID of department to get list of employees
        explode: false
        in: path
        name: departmentId
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeListDTO'
          description: "Successful operation: list of employees for department received"
        "404":
          description: Department id not found
      summary: Get list of employees for given department
      tags:
      - departments
      x-accepts: application/json
      x-tags:
      - tag: departments
  /departments/all:
    get:
      operationId: getListOfDepartments
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentListDTO'
          description: "Successful operation: list of departments received"
      summary: Get list of all departments
      tags:
      - departments
      x-accepts: application/json
      x-tags:
      - tag: departments
components:
  schemas:
    EmployeeDTO:
      example:
        employment_date: 2020-03-30T00:00:00.000+00:00
        birth_date: 2000-01-30T00:00:00.000+00:00
        name: Mask Ilon
        id: 12
        id_of_department: 3
        job_title: Manager
      properties:
        id:
          example: 12
          type: integer
        name:
          example: Mask Ilon
          type: string
        birth_date:
          example: 2000-01-30
          format: date
          type: string
        employment_date:
          example: 2020-03-30
          format: date
          type: string
        id_of_department:
          example: 3
          type: integer
        job_title:
          example: Manager
          type: string
      required:
      - name
      type: object
    EmployeeListDTO:
      example:
        employees:
        - employment_date: 2020-03-30T00:00:00.000+00:00
          birth_date: 2000-01-30T00:00:00.000+00:00
          name: Mask Ilon
          id: 12
          id_of_department: 3
          job_title: Manager
        - employment_date: 2020-03-30T00:00:00.000+00:00
          birth_date: 2000-01-30T00:00:00.000+00:00
          name: Mask Ilon
          id: 12
          id_of_department: 3
          job_title: Manager
      properties:
        employees:
          items:
            $ref: '#/components/schemas/EmployeeDTO'
          type: array
      type: object
    DepartmentDTO:
      example:
        additionalInformation: "Location: LA"
        listOfEmployees:
          employees:
          - employment_date: 2020-03-30T00:00:00.000+00:00
            birth_date: 2000-01-30T00:00:00.000+00:00
            name: Mask Ilon
            id: 12
            id_of_department: 3
            job_title: Manager
          - employment_date: 2020-03-30T00:00:00.000+00:00
            birth_date: 2000-01-30T00:00:00.000+00:00
            name: Mask Ilon
            id: 12
            id_of_department: 3
            job_title: Manager
        name: Development department
        description: Some description
        id: 3
      properties:
        id:
          example: 3
          type: integer
        name:
          example: Development department
          type: string
        description:
          example: Some description
          type: string
        additionalInformation:
          example: "Location: LA"
          type: string
        listOfEmployees:
          $ref: '#/components/schemas/EmployeeListDTO'
      required:
      - name
      type: object
    DepartmentListDTO:
      example:
        departments:
        - additionalInformation: "Location: LA"
          listOfEmployees:
            employees:
            - employment_date: 2020-03-30T00:00:00.000+00:00
              birth_date: 2000-01-30T00:00:00.000+00:00
              name: Mask Ilon
              id: 12
              id_of_department: 3
              job_title: Manager
            - employment_date: 2020-03-30T00:00:00.000+00:00
              birth_date: 2000-01-30T00:00:00.000+00:00
              name: Mask Ilon
              id: 12
              id_of_department: 3
              job_title: Manager
          name: Development department
          description: Some description
          id: 3
        - additionalInformation: "Location: LA"
          listOfEmployees:
            employees:
            - employment_date: 2020-03-30T00:00:00.000+00:00
              birth_date: 2000-01-30T00:00:00.000+00:00
              name: Mask Ilon
              id: 12
              id_of_department: 3
              job_title: Manager
            - employment_date: 2020-03-30T00:00:00.000+00:00
              birth_date: 2000-01-30T00:00:00.000+00:00
              name: Mask Ilon
              id: 12
              id_of_department: 3
              job_title: Manager
          name: Development department
          description: Some description
          id: 3
      properties:
        departments:
          items:
            $ref: '#/components/schemas/DepartmentDTO'
          type: array
      type: object
