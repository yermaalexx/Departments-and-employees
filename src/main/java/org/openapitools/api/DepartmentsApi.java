/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import employeesdepartments.models.DepartmentDTO;
import employeesdepartments.models.DepartmentListDTO;
import employeesdepartments.models.EmployeeListDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-04-23T17:22:50.332529600+03:00[Europe/Kiev]")
@Validated
@Tag(name = "departments", description = "actions on departmental records")
public interface DepartmentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /departments : Add a new department
     *
     * @param departmentDTO  (required)
     * @return Successful operation: new department added (status code 200)
     */
    @Operation(
        operationId = "addDepartment",
        summary = "Add a new department",
        tags = { "departments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation: new department added", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DepartmentDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/departments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DepartmentDTO> addDepartment(
        @Parameter(name = "DepartmentDTO", description = "", required = true) @Valid @RequestBody DepartmentDTO departmentDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"additionalInformation\" : \"Location: LA\", \"listOfEmployees\" : { \"employees\" : [ { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" }, { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" } ] }, \"name\" : \"Development department\", \"description\" : \"Some description\", \"id\" : 3 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /departments/{departmentId} : Delete department by departmentID
     *
     * @param departmentId ID of department to delete (required)
     * @return Successful operation: department deleted (status code 200)
     *         or Department id not found (status code 404)
     */
    @Operation(
        operationId = "deleteDepartment",
        summary = "Delete department by departmentID",
        tags = { "departments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation: department deleted"),
            @ApiResponse(responseCode = "404", description = "Department id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/departments/{departmentId}"
    )
    default ResponseEntity<Void> deleteDepartment(
        @Parameter(name = "departmentId", description = "ID of department to delete", required = true, in = ParameterIn.PATH) @PathVariable("departmentId") Integer departmentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /departments : Edit department by departmentID in DTO
     *
     * @param departmentDTO  (required)
     * @return Successful operation: department edited (status code 200)
     *         or Department id not found (status code 404)
     */
    @Operation(
        operationId = "editDepartment",
        summary = "Edit department by departmentID in DTO",
        tags = { "departments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation: department edited", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DepartmentDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Department id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/departments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DepartmentDTO> editDepartment(
        @Parameter(name = "DepartmentDTO", description = "", required = true) @Valid @RequestBody DepartmentDTO departmentDTO
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"additionalInformation\" : \"Location: LA\", \"listOfEmployees\" : { \"employees\" : [ { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" }, { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" } ] }, \"name\" : \"Development department\", \"description\" : \"Some description\", \"id\" : 3 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /departments/{departmentId} : Get department by departmentID
     *
     * @param departmentId ID of department to get (required)
     * @return Successful operation: department data received (status code 200)
     *         or Department id not found (status code 404)
     */
    @Operation(
        operationId = "getDepartment",
        summary = "Get department by departmentID",
        tags = { "departments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation: department data received", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DepartmentDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Department id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/departments/{departmentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DepartmentDTO> getDepartment(
        @Parameter(name = "departmentId", description = "ID of department to get", required = true, in = ParameterIn.PATH) @PathVariable("departmentId") Integer departmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"additionalInformation\" : \"Location: LA\", \"listOfEmployees\" : { \"employees\" : [ { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" }, { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" } ] }, \"name\" : \"Development department\", \"description\" : \"Some description\", \"id\" : 3 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /departments/all : Get list of all departments
     *
     * @return Successful operation: list of departments received (status code 200)
     */
    @Operation(
        operationId = "getListOfDepartments",
        summary = "Get list of all departments",
        tags = { "departments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation: list of departments received", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DepartmentListDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/departments/all",
        produces = { "application/json" }
    )
    default ResponseEntity<DepartmentListDTO> getListOfDepartments(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"departments\" : [ { \"additionalInformation\" : \"Location: LA\", \"listOfEmployees\" : { \"employees\" : [ { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" }, { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" } ] }, \"name\" : \"Development department\", \"description\" : \"Some description\", \"id\" : 3 }, { \"additionalInformation\" : \"Location: LA\", \"listOfEmployees\" : { \"employees\" : [ { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" }, { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" } ] }, \"name\" : \"Development department\", \"description\" : \"Some description\", \"id\" : 3 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /departments/{departmentId}/list : Get list of employees for given department
     *
     * @param departmentId ID of department to get list of employees (required)
     * @return Successful operation: list of employees for department received (status code 200)
     *         or Department id not found (status code 404)
     */
    @Operation(
        operationId = "getListOfEmployeesForDepartment",
        summary = "Get list of employees for given department",
        tags = { "departments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation: list of employees for department received", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EmployeeListDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Department id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/departments/{departmentId}/list",
        produces = { "application/json" }
    )
    default ResponseEntity<EmployeeListDTO> getListOfEmployeesForDepartment(
        @Parameter(name = "departmentId", description = "ID of department to get list of employees", required = true, in = ParameterIn.PATH) @PathVariable("departmentId") Integer departmentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"employees\" : [ { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" }, { \"employment_date\" : \"2020-03-30T00:00:00.000+00:00\", \"birth_date\" : \"2000-01-30T00:00:00.000+00:00\", \"name\" : \"Mask Ilon\", \"id\" : 12, \"id_of_department\" : 3, \"job_title\" : \"Manager\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
